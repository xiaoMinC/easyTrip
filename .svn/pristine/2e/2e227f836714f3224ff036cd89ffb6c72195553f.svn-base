package com.example.chen.easygo.loginOrRegister;

import android.Manifest;
import android.app.Activity;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.os.Bundle;
import android.support.v4.app.ActivityCompat;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;

import com.example.chen.easygo.MainActivity;
import com.example.chen.easygo.R;
import com.example.chen.easygo.utils.BitmapUtils;
import com.example.chen.easygo.utils.CameraUtils;
import com.example.chen.easygo.utils.Constance;
import com.example.chen.easygo.utils.FileUtil;
import com.example.chen.easygo.utils.photo.CreatePictureDialog;
import com.example.chen.easygo.utils.photo.PhotoChoose;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.List;

import butterknife.BindView;
import butterknife.ButterKnife;
import butterknife.OnClick;
import pub.devrel.easypermissions.AppSettingsDialog;
import pub.devrel.easypermissions.EasyPermissions;

public class RegisterActivity extends Activity implements EasyPermissions.PermissionCallbacks, CreatePictureDialog.ResultListener {

    @BindView(R.id.name_re)
    EditText nameRe;
    @BindView(R.id.phone_re)
    EditText phoneRe;
    @BindView(R.id.msg_re)
    EditText msgRe;
    @BindView(R.id.get_msg_btn)
    Button getMsgBtn;
    @BindView(R.id.id_card_z_re)
    ImageView idCardZRe;
    @BindView(R.id.id_card_f_re)
    ImageView idCardFRe;
    @BindView(R.id.diver_card_re)
    ImageView diverCardRe;
    @BindView(R.id.diver_card_z_re)
    ImageView diverCardZRe;
    @BindView(R.id.diver_card_f_re)
    ImageView diverCardFRe;
    @BindView(R.id.car_re)
    ImageView carRe;
    @BindView(R.id.submit_re)
    Button submitRe;

    private static final String TAG = RegisterActivity.class.getSimpleName();
    private File file;
    private PhotoChoose photoChoose;
    private CreatePictureDialog picture_dialog;
    private static int postion = 0;
    SaveBean saveBean;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_register);
        //允许开启访问本地文件权限
        requestWritePermission();
        recoverState(savedInstanceState);
        ButterKnife.bind(this);

        saveBean = new SaveBean();
    }

    /**
     * 恢复被系统销毁的数据
     *
     * @param savedInstanceState
     */
    private void recoverState(Bundle savedInstanceState) {
        if (savedInstanceState != null) {
            this.picturePath = savedInstanceState.getString(TAG);
        }
    }

    private void requestWritePermission() {
        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
            ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, 1);
        }
        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
            ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, 2);
        }

    }

    @OnClick({R.id.get_msg_btn, R.id.id_card_z_re, R.id.id_card_f_re, R.id.diver_card_re, R.id.diver_card_z_re, R.id.diver_card_f_re, R.id.car_re, R.id.submit_re})
    public void onViewClicked(View view) {
        switch (view.getId()) {
            case R.id.get_msg_btn:
                break;
            case R.id.id_card_z_re:
                showPictureDialog();
                saveBean.setId(R.id.id_card_z_re);
                break;
            case R.id.id_card_f_re:
                showPictureDialog();
                saveBean.setId(R.id.id_card_f_re);
                break;
            case R.id.diver_card_re:
                showPictureDialog();
                saveBean.setId(R.id.diver_card_re);
                break;
            case R.id.diver_card_z_re:
                showPictureDialog();
                saveBean.setId(R.id.diver_card_z_re);
                break;
            case R.id.diver_card_f_re:
                showPictureDialog();
                saveBean.setId(R.id.diver_card_f_re);
                break;
            case R.id.car_re:
                showPictureDialog();
                saveBean.setId(R.id.car_re);
                break;
            case R.id.submit_re:
                register();
                break;
        }
    }


    /**
     * 选择拍照或者图库的弹窗
     */
    private void showPictureDialog() {
        if (picture_dialog == null) {
            this.picture_dialog = new CreatePictureDialog(this);
            this.picture_dialog.setResultListener(this);
        }
        if (!picture_dialog.isShowing()) {
            picture_dialog.show();
        }
    }

    private String picturePath;

    @Override
    public void camera() {
        this.picturePath = FileUtil.getBitmapDiskFile(this.getApplicationContext());
        CameraUtils.openCamera(this, Constance.PICTURE_CODE, this.picturePath);
        dismissPictureDialog();
    }

    @Override
    public void photoAlbum() {
        CameraUtils.openGallery(this, Constance.GALLERY_CODE);
        dismissPictureDialog();
    }

    private void dismissPictureDialog() {
        if (picture_dialog != null && picture_dialog.isShowing()) {
            picture_dialog.dismiss();
        }
    }


    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
//        photoChoose.onActivityResult(requestCode, resultCode, data);
        switch (requestCode) {
            //当从软件设置界面，返回当前程序时候
            case AppSettingsDialog.DEFAULT_SETTINGS_REQ_CODE:
                break;
            //拍照返回
            case Constance.PICTURE_CODE:
                if (resultCode == Activity.RESULT_OK) {
                    loadPictureBitmap();
                }
                break;
            //图库返回
            case Constance.GALLERY_CODE:
                if (resultCode == Activity.RESULT_OK) {
                    Uri uri = data.getData();
                    loadGalleryBitmap(uri);
                }
                break;
            default:

                break;
        }

    }

    /**
     * 图库返回
     *
     * @param uri
     */
    private void loadGalleryBitmap(Uri uri) {
        String picturePath = CameraUtils.uriConvertPath(this, uri);
        switch (saveBean.getId()) {
            case R.id.id_card_z_re:
                setImageBitmap(picturePath, idCardZRe);
                break;
            case R.id.id_card_f_re:
                setImageBitmap(picturePath, idCardFRe);
                break;
            case R.id.diver_card_re:
                setImageBitmap(picturePath, diverCardRe);
                break;
            case R.id.diver_card_z_re:
                setImageBitmap(picturePath, diverCardZRe);
                break;
            case R.id.diver_card_f_re:
                setImageBitmap(picturePath, diverCardFRe);
                break;
            case R.id.car_re:
                setImageBitmap(picturePath, carRe);
                break;
        }

    }

    private void setImageBitmap(String picturePath, ImageView imageView) {
        Bitmap bitmap = BitmapUtils.decodeFileBitmap(this, picturePath, imageView.getWidth(), imageView.getHeight());
        imageView.setImageBitmap(bitmap);
    }

    /**
     * //拍照返回
     */
    private void loadPictureBitmap() {
        Bitmap bitmap;
        switch (saveBean.getId()) {
            case R.id.id_card_z_re:
                bitmap = BitmapUtils.decodeFileBitmap(this, picturePath, idCardZRe.getWidth(), idCardZRe.getHeight());
                idCardZRe.setImageBitmap(bitmap);
                break;
            case R.id.id_card_f_re:
                bitmap = BitmapUtils.decodeFileBitmap(this, picturePath, idCardFRe.getWidth(), idCardFRe.getHeight());
                idCardFRe.setImageBitmap(bitmap);
                break;
            case R.id.diver_card_re:
                bitmap = BitmapUtils.decodeFileBitmap(this, picturePath, diverCardRe.getWidth(), diverCardRe.getHeight());
                diverCardRe.setImageBitmap(bitmap);
                break;
            case R.id.diver_card_z_re:
                bitmap = BitmapUtils.decodeFileBitmap(this, picturePath, diverCardZRe.getWidth(), diverCardZRe.getHeight());
                diverCardZRe.setImageBitmap(bitmap);
                break;
            case R.id.diver_card_f_re:
                bitmap = BitmapUtils.decodeFileBitmap(this, picturePath, diverCardFRe.getWidth(), diverCardFRe.getHeight());
                diverCardFRe.setImageBitmap(bitmap);
                break;
            case R.id.car_re:
                bitmap = BitmapUtils.decodeFileBitmap(this, picturePath, carRe.getWidth(), carRe.getHeight());
                carRe.setImageBitmap(bitmap);
                break;
        }

    }

    /**
     * 保存图片
     *
     * @param
     */
    private void savePic(File f) {
        File rootFile = new File(FileUtil.getImageCache());
        if (!rootFile.exists()) {
            rootFile.mkdirs();
        }
        Bitmap bm = BitmapFactory.decodeFile(f.getAbsolutePath());
        try {
            FileOutputStream fos = new FileOutputStream(f);
//			FileInputStream fis = new FileInputStream(new File(tempPicPath)) ;
            byte[] temp = new byte[1024];
            //添加时间水印
//            Bitmap newbm = addTimeFlag(bm);
//            newbm.compress(Bitmap.CompressFormat.JPEG, 100, fos);// 把数据写入文件
            fos.flush();
            fos.close();
        } catch (FileNotFoundException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


    private void register() {
//        HashMap<String, String> params = new HashMap<>();
//        params.put("uuid", UserLoginUtil.getUUID());
//        params.put("writ_id", writ_id);
//        params.put("writ_type", writ_type);
//        params.put("remarks", remark);

        // 创建 RequestBody，用于封装 请求RequestBody
//        RequestBody requestFile = RequestBody.create(MediaType.parse("multipart/form-data"),file);
//
//        MultipartBody.Part body = MultipartBody.Part.createFormData("theFile",file.getName(),requestFile);
//        // 添加描述
//        String descriptionString = "hello, 这是文件描述";
//        RequestBody description =
//                RequestBody.create(
//                        MediaType.parse("multipart/form-data"), descriptionString);
//
//        DataManager dataManager = new DataManager(this,params);
//        CompositeSubscription compositeSubscription = new CompositeSubscription();
//        compositeSubscription.add(dataManager.uploadFile(params,description,body)
//                .subscribeOn(Schedulers.io())
//                .observeOn(AndroidSchedulers.mainThread())
//                .subscribe(new RObserver<JsonBaseBean>(this,true) {
//                    @Override
//                    protected void onSuccess(JsonBaseBean jsonBaseBean) {
//                        if (jsonBaseBean.getResultCode().equals(AppUtils.SUCCESS)) {
//                            T.showShort(PhotoActivity.this, "上传成功！");
//                        }
//                    }
//
//                    @Override
//                    protected void onError(String msg) {
//
//                    }
//                }));

        startActivity(new Intent(this, MainActivity.class));
    }

    @Override
    public void onPermissionsGranted(int requestCode, List<String> perms) {
//        ToastUtils.showToast(getApplicationContext(), "用户授权成功");
    }

    @Override
    public void onPermissionsDenied(int requestCode, List<String> perms) {

    }
}
